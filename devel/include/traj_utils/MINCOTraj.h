// Generated by gencpp from file traj_utils/MINCOTraj.msg
// DO NOT EDIT!


#ifndef TRAJ_UTILS_MESSAGE_MINCOTRAJ_H
#define TRAJ_UTILS_MESSAGE_MINCOTRAJ_H


#include <string>
#include <vector>
#include <memory>

#include <ros/types.h>
#include <ros/serialization.h>
#include <ros/builtin_message_traits.h>
#include <ros/message_operations.h>


namespace traj_utils
{
template <class ContainerAllocator>
struct MINCOTraj_
{
  typedef MINCOTraj_<ContainerAllocator> Type;

  MINCOTraj_()
    : drone_id(0)
    , traj_id(0)
    , start_time()
    , order(0)
    , start_p()
    , start_v()
    , start_a()
    , end_p()
    , end_v()
    , end_a()
    , inner_x()
    , inner_y()
    , inner_z()
    , duration()  {
      start_p.assign(0.0);

      start_v.assign(0.0);

      start_a.assign(0.0);

      end_p.assign(0.0);

      end_v.assign(0.0);

      end_a.assign(0.0);
  }
  MINCOTraj_(const ContainerAllocator& _alloc)
    : drone_id(0)
    , traj_id(0)
    , start_time()
    , order(0)
    , start_p()
    , start_v()
    , start_a()
    , end_p()
    , end_v()
    , end_a()
    , inner_x(_alloc)
    , inner_y(_alloc)
    , inner_z(_alloc)
    , duration(_alloc)  {
  (void)_alloc;
      start_p.assign(0.0);

      start_v.assign(0.0);

      start_a.assign(0.0);

      end_p.assign(0.0);

      end_v.assign(0.0);

      end_a.assign(0.0);
  }



   typedef int16_t _drone_id_type;
  _drone_id_type drone_id;

   typedef int32_t _traj_id_type;
  _traj_id_type traj_id;

   typedef ros::Time _start_time_type;
  _start_time_type start_time;

   typedef uint8_t _order_type;
  _order_type order;

   typedef boost::array<float, 3>  _start_p_type;
  _start_p_type start_p;

   typedef boost::array<float, 3>  _start_v_type;
  _start_v_type start_v;

   typedef boost::array<float, 3>  _start_a_type;
  _start_a_type start_a;

   typedef boost::array<float, 3>  _end_p_type;
  _end_p_type end_p;

   typedef boost::array<float, 3>  _end_v_type;
  _end_v_type end_v;

   typedef boost::array<float, 3>  _end_a_type;
  _end_a_type end_a;

   typedef std::vector<float, typename std::allocator_traits<ContainerAllocator>::template rebind_alloc<float>> _inner_x_type;
  _inner_x_type inner_x;

   typedef std::vector<float, typename std::allocator_traits<ContainerAllocator>::template rebind_alloc<float>> _inner_y_type;
  _inner_y_type inner_y;

   typedef std::vector<float, typename std::allocator_traits<ContainerAllocator>::template rebind_alloc<float>> _inner_z_type;
  _inner_z_type inner_z;

   typedef std::vector<float, typename std::allocator_traits<ContainerAllocator>::template rebind_alloc<float>> _duration_type;
  _duration_type duration;





  typedef boost::shared_ptr< ::traj_utils::MINCOTraj_<ContainerAllocator> > Ptr;
  typedef boost::shared_ptr< ::traj_utils::MINCOTraj_<ContainerAllocator> const> ConstPtr;

}; // struct MINCOTraj_

typedef ::traj_utils::MINCOTraj_<std::allocator<void> > MINCOTraj;

typedef boost::shared_ptr< ::traj_utils::MINCOTraj > MINCOTrajPtr;
typedef boost::shared_ptr< ::traj_utils::MINCOTraj const> MINCOTrajConstPtr;

// constants requiring out of line definition



template<typename ContainerAllocator>
std::ostream& operator<<(std::ostream& s, const ::traj_utils::MINCOTraj_<ContainerAllocator> & v)
{
ros::message_operations::Printer< ::traj_utils::MINCOTraj_<ContainerAllocator> >::stream(s, "", v);
return s;
}


template<typename ContainerAllocator1, typename ContainerAllocator2>
bool operator==(const ::traj_utils::MINCOTraj_<ContainerAllocator1> & lhs, const ::traj_utils::MINCOTraj_<ContainerAllocator2> & rhs)
{
  return lhs.drone_id == rhs.drone_id &&
    lhs.traj_id == rhs.traj_id &&
    lhs.start_time == rhs.start_time &&
    lhs.order == rhs.order &&
    lhs.start_p == rhs.start_p &&
    lhs.start_v == rhs.start_v &&
    lhs.start_a == rhs.start_a &&
    lhs.end_p == rhs.end_p &&
    lhs.end_v == rhs.end_v &&
    lhs.end_a == rhs.end_a &&
    lhs.inner_x == rhs.inner_x &&
    lhs.inner_y == rhs.inner_y &&
    lhs.inner_z == rhs.inner_z &&
    lhs.duration == rhs.duration;
}

template<typename ContainerAllocator1, typename ContainerAllocator2>
bool operator!=(const ::traj_utils::MINCOTraj_<ContainerAllocator1> & lhs, const ::traj_utils::MINCOTraj_<ContainerAllocator2> & rhs)
{
  return !(lhs == rhs);
}


} // namespace traj_utils

namespace ros
{
namespace message_traits
{





template <class ContainerAllocator>
struct IsMessage< ::traj_utils::MINCOTraj_<ContainerAllocator> >
  : TrueType
  { };

template <class ContainerAllocator>
struct IsMessage< ::traj_utils::MINCOTraj_<ContainerAllocator> const>
  : TrueType
  { };

template <class ContainerAllocator>
struct IsFixedSize< ::traj_utils::MINCOTraj_<ContainerAllocator> >
  : FalseType
  { };

template <class ContainerAllocator>
struct IsFixedSize< ::traj_utils::MINCOTraj_<ContainerAllocator> const>
  : FalseType
  { };

template <class ContainerAllocator>
struct HasHeader< ::traj_utils::MINCOTraj_<ContainerAllocator> >
  : FalseType
  { };

template <class ContainerAllocator>
struct HasHeader< ::traj_utils::MINCOTraj_<ContainerAllocator> const>
  : FalseType
  { };


template<class ContainerAllocator>
struct MD5Sum< ::traj_utils::MINCOTraj_<ContainerAllocator> >
{
  static const char* value()
  {
    return "5fcb933c545c68ff79033d88de2ca0cb";
  }

  static const char* value(const ::traj_utils::MINCOTraj_<ContainerAllocator>&) { return value(); }
  static const uint64_t static_value1 = 0x5fcb933c545c68ffULL;
  static const uint64_t static_value2 = 0x79033d88de2ca0cbULL;
};

template<class ContainerAllocator>
struct DataType< ::traj_utils::MINCOTraj_<ContainerAllocator> >
{
  static const char* value()
  {
    return "traj_utils/MINCOTraj";
  }

  static const char* value(const ::traj_utils::MINCOTraj_<ContainerAllocator>&) { return value(); }
};

template<class ContainerAllocator>
struct Definition< ::traj_utils::MINCOTraj_<ContainerAllocator> >
{
  static const char* value()
  {
    return "int16 drone_id\n"
"int32 traj_id\n"
"time start_time\n"
"\n"
"uint8 order\n"
"float32[3] start_p\n"
"float32[3] start_v\n"
"float32[3] start_a\n"
"float32[3] end_p\n"
"float32[3] end_v\n"
"float32[3] end_a\n"
"float32[] inner_x\n"
"float32[] inner_y\n"
"float32[] inner_z\n"
"float32[] duration\n"
;
  }

  static const char* value(const ::traj_utils::MINCOTraj_<ContainerAllocator>&) { return value(); }
};

} // namespace message_traits
} // namespace ros

namespace ros
{
namespace serialization
{

  template<class ContainerAllocator> struct Serializer< ::traj_utils::MINCOTraj_<ContainerAllocator> >
  {
    template<typename Stream, typename T> inline static void allInOne(Stream& stream, T m)
    {
      stream.next(m.drone_id);
      stream.next(m.traj_id);
      stream.next(m.start_time);
      stream.next(m.order);
      stream.next(m.start_p);
      stream.next(m.start_v);
      stream.next(m.start_a);
      stream.next(m.end_p);
      stream.next(m.end_v);
      stream.next(m.end_a);
      stream.next(m.inner_x);
      stream.next(m.inner_y);
      stream.next(m.inner_z);
      stream.next(m.duration);
    }

    ROS_DECLARE_ALLINONE_SERIALIZER
  }; // struct MINCOTraj_

} // namespace serialization
} // namespace ros

namespace ros
{
namespace message_operations
{

template<class ContainerAllocator>
struct Printer< ::traj_utils::MINCOTraj_<ContainerAllocator> >
{
  template<typename Stream> static void stream(Stream& s, const std::string& indent, const ::traj_utils::MINCOTraj_<ContainerAllocator>& v)
  {
    s << indent << "drone_id: ";
    Printer<int16_t>::stream(s, indent + "  ", v.drone_id);
    s << indent << "traj_id: ";
    Printer<int32_t>::stream(s, indent + "  ", v.traj_id);
    s << indent << "start_time: ";
    Printer<ros::Time>::stream(s, indent + "  ", v.start_time);
    s << indent << "order: ";
    Printer<uint8_t>::stream(s, indent + "  ", v.order);
    s << indent << "start_p[]" << std::endl;
    for (size_t i = 0; i < v.start_p.size(); ++i)
    {
      s << indent << "  start_p[" << i << "]: ";
      Printer<float>::stream(s, indent + "  ", v.start_p[i]);
    }
    s << indent << "start_v[]" << std::endl;
    for (size_t i = 0; i < v.start_v.size(); ++i)
    {
      s << indent << "  start_v[" << i << "]: ";
      Printer<float>::stream(s, indent + "  ", v.start_v[i]);
    }
    s << indent << "start_a[]" << std::endl;
    for (size_t i = 0; i < v.start_a.size(); ++i)
    {
      s << indent << "  start_a[" << i << "]: ";
      Printer<float>::stream(s, indent + "  ", v.start_a[i]);
    }
    s << indent << "end_p[]" << std::endl;
    for (size_t i = 0; i < v.end_p.size(); ++i)
    {
      s << indent << "  end_p[" << i << "]: ";
      Printer<float>::stream(s, indent + "  ", v.end_p[i]);
    }
    s << indent << "end_v[]" << std::endl;
    for (size_t i = 0; i < v.end_v.size(); ++i)
    {
      s << indent << "  end_v[" << i << "]: ";
      Printer<float>::stream(s, indent + "  ", v.end_v[i]);
    }
    s << indent << "end_a[]" << std::endl;
    for (size_t i = 0; i < v.end_a.size(); ++i)
    {
      s << indent << "  end_a[" << i << "]: ";
      Printer<float>::stream(s, indent + "  ", v.end_a[i]);
    }
    s << indent << "inner_x[]" << std::endl;
    for (size_t i = 0; i < v.inner_x.size(); ++i)
    {
      s << indent << "  inner_x[" << i << "]: ";
      Printer<float>::stream(s, indent + "  ", v.inner_x[i]);
    }
    s << indent << "inner_y[]" << std::endl;
    for (size_t i = 0; i < v.inner_y.size(); ++i)
    {
      s << indent << "  inner_y[" << i << "]: ";
      Printer<float>::stream(s, indent + "  ", v.inner_y[i]);
    }
    s << indent << "inner_z[]" << std::endl;
    for (size_t i = 0; i < v.inner_z.size(); ++i)
    {
      s << indent << "  inner_z[" << i << "]: ";
      Printer<float>::stream(s, indent + "  ", v.inner_z[i]);
    }
    s << indent << "duration[]" << std::endl;
    for (size_t i = 0; i < v.duration.size(); ++i)
    {
      s << indent << "  duration[" << i << "]: ";
      Printer<float>::stream(s, indent + "  ", v.duration[i]);
    }
  }
};

} // namespace message_operations
} // namespace ros

#endif // TRAJ_UTILS_MESSAGE_MINCOTRAJ_H
